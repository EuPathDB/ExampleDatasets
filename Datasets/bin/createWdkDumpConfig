#!/usr/bin/perl
use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use Getopt::Long;
use GUS::Supported::GusConfig;
use GUS::ObjRelP::DbiDatabase;
use Data::Dumper;

my ($project,$release,$loadTable,$createFile,$outputFile,$gusConfigFile);
&GetOptions("gusConfigFile=s" => \$gusConfigFile,
            "project=s"=> \$project,
            "release=s"=> \$release,
	    "createFile!"=> \$createFile,
            "loadTable!"=> \$loadTable,
            "outputFile=s" => \$outputFile);

my $verbose = 0;

if (!$project || !$release || !$outputFile) {
die "createWdkDumpConfig <--gusConfigFile> --project --release <--createFile> <--loadTable> --outputFile\n
project (e.g. ToxoDB), release (release number as it appears in the download dir), outputFile (name of config file) required.  loadTable (load rows into Details tables if true) and createFile (create txt files in download dir if true) are booleans. gusConfigFile (use gus_home/config/gus.config by default)";} 

print STDERR "Establishing dbi login\n";

my $gusconfig = GUS::Supported::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
                                        $gusconfig->getDatabaseLogin(),
                                        $gusconfig->getDatabasePassword(),
                                        $verbose, 0, 1,
                                        $gusconfig->getCoreSchemaName());


my $dbh = $db->getQueryHandle(0);

my $sql = "select o.name_for_filenames, tn.name, o.is_annotated_genome from apidb.organism o, sres.taxonname tn where tn.taxon_id = o.taxon_id and tn.name_class = 'scientific name'";

#get na_sequence_id from EnxternalNASequence for ESTs
print STDERR "sql: $sql\n ";

my $stmt1 = $dbh->prepareAndExecute($sql);

my %annotated;
my %unannotated;
 
while(my ($filename,$org,$isAnnot) = $stmt1->fetchrow_array()) {

  if ($isAnnot){
    $annotated{$filename} = $org;
  }
  else{
    $unannotated{$filename} = $org;
  }
}

$stmt1->finish();

open (FILE,">>$outputFile") or die "Cannot open file $outputFile  for writing\n";

my $create=$createFile?"yes":"no";
my $load=$loadTable?"yes":"no";

print FILE "project=" . $project .  " release=" . $release .  " loadDetailTable=" . $load . " createFile=" . $create . "\n";

my $fn;

foreach $fn (keys %annotated){

    print FILE "org=" . $fn . "|" . $annotated{$fn} . "\n" 
. "type=Gene detailTable=apidb.GeneDetail fields=all otherSql=0 dir=" . $fn . "\n";
### . "type=Sequence detailTable=apidb.SequenceDetail fields=all dir=" . $fn . "\n";
}

###foreach $fn (keys %unannotated){
###    print FILE "org=" . $fn . "|" . $unannotated{$fn} . "\n"
###. "type=Sequence detailTable=apidb.SequenceDetail fields=all dir=" . $fn . "\n";
###}


my $sql2 = "select FAMILY_REPRESENTATIVE_ABBREV, FAMILY_NAME_FOR_FILES from apidb.organism where FAMILY_NAME_FOR_FILES is not null";

my $stmt2 = $dbh->prepareAndExecute($sql2);

my %isolates;

while(my ($familyRepAbbrev,$familyFilename) = $stmt2->fetchrow_array()) {
	$isolates{$familyFilename} = $familyRepAbbrev;
}

$stmt2->finish();


foreach my $familyFile (keys  %isolates){
	 print FILE "org=" . $familyFile . "|" . $isolates{$familyFile} ."_isolates_genbank_RSRC\n"
. "type=PopsetAlt detailTable=apidb.IsolateDetail fields=all otherSql=0 dir=" . $familyFile . "\n";
}

print FILE "org=" . $project . "\n"
. 'type=Compound detailTable=apidb.CompoundDetail fields="CompoundName,Properties,IupacNames,Definition,SecondaryIds,Synonyms,CompoundsMetabolicPathways,PathwaysFromCompounds" dir=' . $project . "\n";

print FILE "//\n";

close(FILE);





